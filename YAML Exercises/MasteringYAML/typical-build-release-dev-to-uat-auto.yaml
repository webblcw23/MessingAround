# A typical Azure DevOps YAML pipeline for building and deploying a .NET application to Azure App Service. Building from first pipeline. This will complete a run in Dev, and if ok, will go to UAT automatically.
trigger:
  branches:
    include:
      - main # can be set to none to disable auto-triggering

pool:
  vmImage: "windows-latest" #perhaps 'ubuntu-latest' or 'macos-latest' depending on your needs

variables:
  buildConfiguration: "Release"
  sourceFolder: "src/MyWebApp" # Path to the source code
  publishFolder: "$(Build.ArtifactStagingDirectory)" # Folder to stage artifacts
  artifactName: "drop"
  deployPackagePath: "$(System.ArtifactsDirectory)/$(artifactName)" # Path to the deployment package
  azureSubscription: "My Azure Subscription"
  appServiceName: "my-dotnet-app"
  devEnvironmentName: "Dev" # Environment name for deployment
  uatEnvironmentName: "UAT" # Environment name for UAT deployment

stages:
  - stage: Build # Build stage begins here
    displayName: "Build Stage"
    jobs:
      - job: BuildJob
        displayName: "Build and Test"
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "8.0.x"

          - script: dotnet restore $(sourceFolder) # Restore NuGet packages
            displayName: "Restore NuGet Packages"

          - script: dotnet build $(sourceFolder) --configuration $(buildConfiguration) # Build the solution
            displayName: "Build Solution"

          - script: dotnet test tests/MyWebApp.Tests/MyWebApp.Tests.csproj --configuration $(buildConfiguration) --no-build # Run unit tests. Refer to the specific test project path - this could also be a variable
            displayName: "Run Unit Tests"

          - script: dotnet publish $(sourceFolder) --configuration $(buildConfiguration) --output $(publishFolder) # Publish the application
            displayName: "Publish App"

          - task: PublishBuildArtifacts@1 # Publish the build artifacts
            inputs:
              pathToPublish: "$(publishFolder)"
              artifactName: "$(artifactName)"

  - stage: ReleaseToDev # Release stages begins here. Dev first, then UAT below in the next stage
    displayName: "Release to Dev"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeployToDev # Deployment job to Azure App Service
        displayName: "Deploy to Azure App Service"
        environment: "$(devEnvironmentName)" # Dev environment called from variables
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  inputs:
                    artifactName: "$(artifactName)"

                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: "$(azureSubscription)"
                    appName: "$(appServiceName)"
                    package: "$(deployPackagePath)"

  - stage: ReleaseToUat # Release to UAT stage begins here
    displayName: "Release To UAT"
    dependsOn: ReleaseToDev
    condition: succeeded() # Only run if the previous stage succeeded
    jobs:
      - deployment: DeployToUat # Deployment job to Azure App Service
        displayName: "Deploy to Azure App Service"
        environment: "$(uatEnvironmentName)" # UAT environment name called from variable
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  inputs:
                    artifactName: "$(artifactName)"

                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: "$(azureSubscription)"
                    appName: "$(appServiceName)"
                    package: "$(deployPackagePath)"
